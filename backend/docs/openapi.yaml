openapi: 3.0.3
info:
  title: Deloitte University API
  description: |-
    _Django API Rest - Deloitte University_
    
    This is a sample university user management system server based on the OpenAPI 3.0 specification.  

    Some useful links:
    - [The Deloitte University repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Deloitte University](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  contact:
    email: vgerlachhessel@gmail.com
  version: 1.0.0
servers:
  - url: https://localhost:8000/api/v1.0.0/
tags:
  - name: student
    description: Operations about students
  - name: teacher
    description: Operations about teachers
  - name: subject
    description: Operations about subjects
  - name: security
    description: Security operations
paths:
  /student:
    get:
      tags:
        - student
      summary: Get all students
      description: Get all the students
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'        
        '400':
          description: Invalid status value
    post:
      tags:
        - student
      summary: Add a new student to the university
      description: Add a new student to the university
      requestBody:
        description: Create a new student in the university
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'          
        '405':
          description: Invalid input
    
  
  /student/{studentId}:
    get:
      tags:
        - student
      summary: Find student by ID
      description: Returns a single student
      parameters:
        - name: studentId
          in: path
          description: ID of student to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Student not found
    put:
      tags:
        - student
      summary: Update student
      description: Update an existing student by Id
      parameters:
        - name: studentId
          in: path
          description: ID of student to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent user in the university app
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'          
        '405':
          description: Invalid input
    delete:
      tags:
        - student
      summary: Deletes a student
      description: Delete a student by ID
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: studentId
          in: path
          description: Student id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid student value
  /teacher:
    get:
      tags:
        - teacher
      summary: Get all teachers
      description: Get all the teachers
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'        
        '400':
          description: Invalid status value
    post:
      tags:
        - teacher
      summary: Add a new teacher to the university
      description: Add a new teacher to the university
      requestBody:
        description: Create a new teacher in the university
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'          
        '405':
          description: Invalid input
  /teacher/{teacherId}:
    get:
      tags:
        - teacher
      summary: Find teacher by ID
      description: Returns a single teacher
      parameters:
        - name: teacherId
          in: path
          description: ID of teacher to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Student not found
    put:
      tags:
        - teacher
      summary: Update teacher
      description: Update an existing teacher by Id
      parameters:
        - name: teacherId
          in: path
          description: ID of teacher to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent user in the university app
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Teacher'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'          
        '405':
          description: Invalid input
    delete:
      tags:
        - teacher
      summary: Deletes a teacher
      description: Delete a teacher by ID
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: teacherId
          in: path
          description: Teacher id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid teacher value
  /subject:
    get:
      tags:
        - subject
      summary: Get all subjects
      description: Get all the subjects
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'        
        '400':
          description: Invalid status value
    post:
      tags:
        - subject
      summary: Add a new subject to the university
      description: Add a new subject to the university
      requestBody:
        description: Create a new subject in the university
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'          
        '405':
          description: Invalid input
  /subject/{subjectId}:
    get:
      tags:
        - subject
      summary: Find subject by ID
      description: Returns a single subject
      parameters:
        - name: subjectId
          in: path
          description: ID of subject to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Subject not found
    put:
      tags:
        - subject
      summary: Update subject
      description: Update an existing subject by Id
      parameters:
        - name: subjectId
          in: path
          description: ID of subject to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent subject in the university app
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'          
        '405':
          description: Invalid input
    delete:
      tags:
        - subject
      summary: Deletes a subject
      description: Delete a subject by ID
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: subjectId
          in: path
          description: Subject id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid subject value
components:
  schemas:
    Student:
      type: object
      required: [id]
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: John
        email:
          type: string
          example: example@gmail.com
        birth-date:
          type: string
          format: date-time
        password:
          type: string
        subjects:
          type: array
          items:
            type: object
            required: [subject-id]
            properties:
              subject-id:
                type: integer
                format: int64
                example: 10
              subject-name: 
                type: string
              subject-workload:
                type: integer
                format: int32
              grade:
                type: number
                format: float
    Teacher:
      type: object
      required: [id]
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: John
        email:
          type: string
          example: example@gmail.com
        birth-date:
          type: string
          format: date-time
        password:
          type: string
        subjects:
          type: array
          items:
            type: object
            required: [subject-id]
            properties:
              subject-id:
                type: integer
                format: int64
                example: 10
              subject-name: 
                type: string
              subject-workload:
                type: integer
                format: int32
              students:
                type: array
                items:
                  type: object
                  required: [student-id]
                  properties:
                    student-id:
                      type: integer
                      format: int64
                      example: 10
                    student-name: 
                      type: string
                    grade:
                      type: number
                      format: float
    Subject:
      type: object
      required: [id]
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: John
        teacher-id:
          type: integer
          format: int32
          example: example@gmail.com
        workload:
          type: integer
          format: int32
        students:
          type: array
          items:
            type: object
            required: [student-id]
            properties:
              student-id:
                type: integer
                format: int64
                example: 10
              student-name: 
                type: string
              grade:
                type: number
                format: float
              
      